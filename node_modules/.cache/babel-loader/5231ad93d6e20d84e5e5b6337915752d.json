{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\Yeni klas\\xF6r (2)\\\\src\\\\Notification.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Button, Box, TextField } from \"@mui/material\";\nimport DesoApi from \"./libs/desoApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Notification = () => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [desoApi, setDesoApi] = useState(null);\n  const [follower, setFollower] = useState([]);\n  const [liker, setLiker] = useState([]);\n  const [transfer, setTransfer] = useState([]);\n  const [reposter, setReposter] = useState();\n  const [commenter, setCommenter] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [usernames, setUsernames] = useState([]);\n  const [usernamesFollowers, setUsernamesFollowers] = useState([]);\n  const [usernamesDiamonders, setUsernamesDiamonders] = useState([]);\n\n  const getNotifications = async () => {\n    const PublicKeyBase58Check = username;\n    const notificationsCall = await desoApi.getNotifications(PublicKeyBase58Check);\n    setLiker(notificationsCall === null || notificationsCall === void 0 ? void 0 : notificationsCall.Notifications.map(x => x.Metadata.TxnType === \"LIKE\" ? [x.Metadata.TransactorPublicKeyBase58Check, x.Metadata.LikeTxindexMetadata.PostHashHex] : \"x\").filter((item, pos) => item.indexOf(\"x\")));\n    setFollower(notificationsCall === null || notificationsCall === void 0 ? void 0 : notificationsCall.Notifications.map(x => x.Metadata.TxnType === \"FOLLOW\" ? [x.Metadata.TransactorPublicKeyBase58Check] : \"x\").filter((item, pos) => item.indexOf(\"x\")));\n    setTransfer(notificationsCall === null || notificationsCall === void 0 ? void 0 : notificationsCall.Notifications.map(x => x.Metadata.TxnType === \"BASIC_TRANSFER\" ? [x.Metadata.TransactorPublicKeyBase58Check, x.Metadata.BasicTransferTxindexMetadata.DiamondLevel, x.Metadata.BasicTransferTxindexMetadata.PostHashHex] : \"x\").filter((item, pos) => item.indexOf(\"x\")));\n    await getUsers();\n  };\n\n  useEffect(() => {\n    const da = new DesoApi();\n    setDesoApi(da);\n  }, []);\n  useEffect(() => {\n    if (liker || transfer || follower) {\n      setLoading(false);\n    } else {\n      setLoading(true);\n    }\n  }, [liker, transfer, follower]);\n\n  const getUsers = async () => {\n    const likers = liker.map(x => x[0]);\n    const followers = follower.map(x => x[0]);\n    const diamonders = transfer.map(x => x[0]);\n    const users = await desoApi.getUsersStateless(likers);\n    const followerUsers = await desoApi.getUsersStateless(followers);\n    const diamonderUsers = await desoApi.getUsersStateless(diamonders);\n    console.log(\"USERRSS\", users);\n    setUsernames(users === null || users === void 0 ? void 0 : users.UserList.map(user => {\n      var _user$ProfileEntryRes;\n\n      return user === null || user === void 0 ? void 0 : (_user$ProfileEntryRes = user.ProfileEntryResponse) === null || _user$ProfileEntryRes === void 0 ? void 0 : _user$ProfileEntryRes.Username;\n    }));\n    setUsernamesFollowers(followerUsers === null || followerUsers === void 0 ? void 0 : followerUsers.UserList.map(user => {\n      var _user$ProfileEntryRes2;\n\n      return user === null || user === void 0 ? void 0 : (_user$ProfileEntryRes2 = user.ProfileEntryResponse) === null || _user$ProfileEntryRes2 === void 0 ? void 0 : _user$ProfileEntryRes2.Username;\n    }));\n    setUsernamesDiamonders(diamonderUsers === null || diamonderUsers === void 0 ? void 0 : diamonderUsers.UserList.map(user => {\n      var _user$ProfileEntryRes3;\n\n      return user === null || user === void 0 ? void 0 : (_user$ProfileEntryRes3 = user.ProfileEntryResponse) === null || _user$ProfileEntryRes3 === void 0 ? void 0 : _user$ProfileEntryRes3.Username;\n    }));\n  };\n\n  console.log(\"usernames\", usernames);\n  console.log(\"usernames\", usernamesFollowers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        sx: {\n          width: \"100%\",\n          mb: 2\n        },\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        label: \"Get notifications of any profile using his/her public key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        mb: 2\n      },\n      variant: \"contained\",\n      onClick: getNotifications,\n      children: \"Get notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), loading !== true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [usernames.length > 0 ? liker === null || liker === void 0 ? void 0 : liker.map((like, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" \", usernames[index], \" Liked your post with the postHashHex \", like[1], \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this)) : \"\", usernamesFollowers.length > 0 ? follower === null || follower === void 0 ? void 0 : follower.map((follow, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" \", usernamesFollowers[index], \" Followed you.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this)) : \"\", diamonderUsers.length > 0 ? transfer.map((trans, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" \", diamonderUsers[index], \" Gave you \", trans[1], \" Diamond\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : \"loading\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notification, \"jWIA9BdWtLM7N4I8exwWxaeeiNE=\");\n\n_c = Notification;\nexport default Notification;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"sources":["C:/Users/PC/Desktop/Yeni klas√∂r (2)/src/Notification.js"],"names":["React","useEffect","useState","Button","Box","TextField","DesoApi","Notification","username","setUsername","desoApi","setDesoApi","follower","setFollower","liker","setLiker","transfer","setTransfer","reposter","setReposter","commenter","setCommenter","loading","setLoading","usernames","setUsernames","usernamesFollowers","setUsernamesFollowers","usernamesDiamonders","setUsernamesDiamonders","getNotifications","PublicKeyBase58Check","notificationsCall","Notifications","map","x","Metadata","TxnType","TransactorPublicKeyBase58Check","LikeTxindexMetadata","PostHashHex","filter","item","pos","indexOf","BasicTransferTxindexMetadata","DiamondLevel","getUsers","da","likers","followers","diamonders","users","getUsersStateless","followerUsers","diamonderUsers","console","log","UserList","user","ProfileEntryResponse","Username","mb","width","e","target","value","length","like","index","follow","trans"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Box, TextField } from \"@mui/material\";\r\nimport DesoApi from \"./libs/desoApi\";\r\nconst Notification = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [desoApi, setDesoApi] = useState(null);\r\n\r\n  const [follower, setFollower] = useState([]);\r\n  const [liker, setLiker] = useState([]);\r\n  const [transfer, setTransfer] = useState([]);\r\n  const [reposter, setReposter] = useState();\r\n  const [commenter, setCommenter] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [usernames,setUsernames] = useState([]);\r\n  const [usernamesFollowers, setUsernamesFollowers] = useState([]);\r\n  const [usernamesDiamonders, setUsernamesDiamonders] = useState([]);\r\n  const getNotifications = async () => {\r\n    const PublicKeyBase58Check = username;\r\n    const notificationsCall = await desoApi.getNotifications(\r\n      PublicKeyBase58Check\r\n    );\r\n    setLiker(\r\n      notificationsCall?.Notifications.map((x) =>\r\n        x.Metadata.TxnType === \"LIKE\"\r\n          ? [\r\n              x.Metadata.TransactorPublicKeyBase58Check,\r\n              x.Metadata.LikeTxindexMetadata.PostHashHex,\r\n            ]\r\n          : \"x\"\r\n      ).filter((item, pos) => item.indexOf(\"x\"))\r\n    );\r\n    setFollower(\r\n      notificationsCall?.Notifications.map((x) =>\r\n        x.Metadata.TxnType === \"FOLLOW\"\r\n          ? [x.Metadata.TransactorPublicKeyBase58Check]\r\n          : \"x\"\r\n      ).filter((item, pos) => item.indexOf(\"x\"))\r\n    );\r\n    setTransfer(\r\n      notificationsCall?.Notifications.map((x) =>\r\n        x.Metadata.TxnType === \"BASIC_TRANSFER\"\r\n          ? [\r\n              x.Metadata.TransactorPublicKeyBase58Check,\r\n              x.Metadata.BasicTransferTxindexMetadata.DiamondLevel,\r\n              x.Metadata.BasicTransferTxindexMetadata.PostHashHex,\r\n            ]\r\n          : \"x\"\r\n      ).filter((item, pos) => item.indexOf(\"x\"))\r\n    );\r\n  await  getUsers();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const da = new DesoApi();\r\n    setDesoApi(da);\r\n  }, []);\r\n  useEffect(() => {\r\n    if (liker || transfer || follower) {\r\n      setLoading(false);\r\n    } else {\r\n      setLoading(true);\r\n    }\r\n  }, [liker, transfer, follower]);\r\n  const getUsers = async()=>{\r\n      const likers = liker.map(x=>x[0])\r\n      const followers = follower.map(x=>x[0])\r\n      const diamonders = transfer.map(x=>x[0])\r\n    const users = await desoApi.getUsersStateless(likers)\r\n    const followerUsers = await desoApi.getUsersStateless(followers)\r\n    const diamonderUsers = await desoApi.getUsersStateless(diamonders)\r\n\r\n    console.log(\"USERRSS\",users)\r\n    setUsernames(users?.UserList.map(user=> user?.ProfileEntryResponse?.Username))\r\n    setUsernamesFollowers(followerUsers?.UserList.map(user=> user?.ProfileEntryResponse?.Username))\r\n    setUsernamesDiamonders(diamonderUsers?.UserList.map(user=> user?.ProfileEntryResponse?.Username))\r\n\r\n  }\r\nconsole.log(\"usernames\",usernames)\r\nconsole.log(\"usernames\",usernamesFollowers)\r\n  return (\r\n    <div>\r\n      <Box sx={{ mb: 2 }}>\r\n        <TextField\r\n          sx={{ width: \"100%\", mb: 2 }}\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          label=\"Get notifications of any profile using his/her public key\"\r\n        />\r\n      </Box>\r\n      <Box />\r\n      <Button sx={{ mb: 2 }} variant=\"contained\" onClick={getNotifications}>\r\n        Get notifications\r\n      </Button>\r\n      {loading !== true ? (\r\n        <>\r\n          {/* <div>\r\n            {follower.map((follow,index) => (\r\n              <ul>\r\n                <li> {usernames[index]} Followed you.</li>\r\n              </ul>\r\n            ))}\r\n          </div> */}\r\n          <div>\r\n            {usernames.length>0 ? liker?.map((like,index) => (\r\n              <ul>\r\n                <li>\r\n                  {\" \"}\r\n                  {usernames[index]} Liked your post with the postHashHex {like[1]}.\r\n                </li>\r\n              </ul>\r\n            )) : \"\"}\r\n                 {usernamesFollowers.length>0 ? follower?.map((follow,index) => (\r\n              <ul>\r\n                <li>\r\n                  {\" \"}\r\n                  {usernamesFollowers[index]} Followed you.\r\n                </li>\r\n              </ul>\r\n            )) : \"\"}\r\n             {diamonderUsers.length>0? transfer.map((trans,index) => (\r\n              <ul>\r\n                <li> {diamonderUsers[index]} Gave you {trans[1]} Diamond</li>\r\n              </ul>\r\n            )):\"\"}\r\n          </div>\r\n       \r\n           \r\n         \r\n        </>\r\n      ) : (\r\n        \"loading\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n"]},"metadata":{},"sourceType":"module"}