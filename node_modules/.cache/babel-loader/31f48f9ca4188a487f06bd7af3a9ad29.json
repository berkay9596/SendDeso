{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\Yeni klas\\xF6r (2)\\\\src\\\\Notification.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Button, Box, TextField } from \"@mui/material\";\nimport DesoApi from \"./libs/desoApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Notification = () => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [desoApi, setDesoApi] = useState(null);\n  const [follower, setFollower] = useState([]);\n  const [liker, setLiker] = useState([]);\n  const [diamonder, setDiamonder] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [usernames, setUsernames] = useState([]);\n  const [usernamesFollowers, setUsernamesFollowers] = useState([]);\n  const [usernamesDiamonders, setUsernamesDiamonders] = useState([]);\n\n  const getNotifications = async () => {\n    const PublicKeyBase58Check = username;\n    const notificationsCall = await desoApi.getNotifications(PublicKeyBase58Check);\n    await setLiker(notificationsCall === null || notificationsCall === void 0 ? void 0 : notificationsCall.Notifications.map(x => x.Metadata.TxnType === \"LIKE\" ? [x.Metadata.TransactorPublicKeyBase58Check, x.Metadata.LikeTxindexMetadata.PostHashHex] : \"x\").filter((item, pos) => item.indexOf(\"x\")));\n    await setFollower(notificationsCall === null || notificationsCall === void 0 ? void 0 : notificationsCall.Notifications.map(x => x.Metadata.TxnType === \"FOLLOW\" ? [x.Metadata.TransactorPublicKeyBase58Check] : \"x\").filter((item, pos) => item.indexOf(\"x\")));\n    await setDiamonder(notificationsCall === null || notificationsCall === void 0 ? void 0 : notificationsCall.Notifications.map(x => x.Metadata.TxnType === \"BASIC_TRANSFER\" ? [x.Metadata.TransactorPublicKeyBase58Check, x.Metadata.BasicTransferTxindexMetadata.DiamondLevel, x.Metadata.BasicTransferTxindexMetadata.PostHashHex] : \"x\").filter((item, pos) => item.indexOf(\"x\")));\n  };\n\n  useEffect(() => {\n    if (liker.length > 0 && diamonder.length > 0 && follower.length > 0) {\n      getUsers();\n      const allPublicKeys = [...liker, ...follower, ...diamonder].map(x => x[0]);\n      console.log(\"AAAAA\", a);\n    }\n  }, [liker, diamonder, follower]);\n  useEffect(() => {\n    const da = new DesoApi();\n    setDesoApi(da);\n  }, []);\n\n  const getUsers = async () => {\n    const likers = await (liker === null || liker === void 0 ? void 0 : liker.map(x => x[0]));\n    const followers = await (follower === null || follower === void 0 ? void 0 : follower.map(x => x[0]));\n    const diamonders = await (diamonder === null || diamonder === void 0 ? void 0 : diamonder.map(x => x[0]));\n    const users = await desoApi.getUsersStateless(likers);\n    const followerUsers = await desoApi.getUsersStateless(followers);\n    const diamonderUsers = await desoApi.getUsersStateless(diamonders);\n    console.log(\"USERRSS\", users);\n    setUsernames(users === null || users === void 0 ? void 0 : users.UserList.map(user => {\n      var _user$ProfileEntryRes;\n\n      return user === null || user === void 0 ? void 0 : (_user$ProfileEntryRes = user.ProfileEntryResponse) === null || _user$ProfileEntryRes === void 0 ? void 0 : _user$ProfileEntryRes.Username;\n    }));\n    setUsernamesFollowers(followerUsers === null || followerUsers === void 0 ? void 0 : followerUsers.UserList.map(user => {\n      var _user$ProfileEntryRes2;\n\n      return user === null || user === void 0 ? void 0 : (_user$ProfileEntryRes2 = user.ProfileEntryResponse) === null || _user$ProfileEntryRes2 === void 0 ? void 0 : _user$ProfileEntryRes2.Username;\n    }));\n    setUsernamesDiamonders(diamonderUsers === null || diamonderUsers === void 0 ? void 0 : diamonderUsers.UserList.map(user => {\n      var _user$ProfileEntryRes3;\n\n      return user === null || user === void 0 ? void 0 : (_user$ProfileEntryRes3 = user.ProfileEntryResponse) === null || _user$ProfileEntryRes3 === void 0 ? void 0 : _user$ProfileEntryRes3.Username;\n    }));\n  };\n\n  console.log(\"liker\", liker);\n  console.log(\"usernames\", usernamesFollowers);\n  console.log(\"diamonders\", diamonder);\n  console.log(\"diamond profiles\", usernamesDiamonders);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        sx: {\n          width: \"100%\",\n          mb: 2\n        },\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        label: \"Get notifications of any profile using his/her public key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        mb: 2\n      },\n      variant: \"contained\",\n      onClick: getNotifications,\n      children: \"Get notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [usernames.length > 0 ? liker === null || liker === void 0 ? void 0 : liker.map((like, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" \", usernames[index], \" Liked your post with the postHashHex\", \" \", like[1], \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this)) : \"\", usernamesFollowers.length > 0 ? follower === null || follower === void 0 ? void 0 : follower.map((follow, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" \", usernamesFollowers[index], \" Followed you.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)) : \"\", usernamesDiamonders.length > 0 ? diamonder.map((trans, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" \", usernamesDiamonders[index], \" Gave you \", trans[1], \" Diamond\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }, this)) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notification, \"Kp5t8vh1N7gNWx17npnxCaGoghk=\");\n\n_c = Notification;\nexport default Notification;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"sources":["C:/Users/PC/Desktop/Yeni klas√∂r (2)/src/Notification.js"],"names":["React","useEffect","useState","Button","Box","TextField","DesoApi","Notification","username","setUsername","desoApi","setDesoApi","follower","setFollower","liker","setLiker","diamonder","setDiamonder","loading","setLoading","usernames","setUsernames","usernamesFollowers","setUsernamesFollowers","usernamesDiamonders","setUsernamesDiamonders","getNotifications","PublicKeyBase58Check","notificationsCall","Notifications","map","x","Metadata","TxnType","TransactorPublicKeyBase58Check","LikeTxindexMetadata","PostHashHex","filter","item","pos","indexOf","BasicTransferTxindexMetadata","DiamondLevel","length","getUsers","allPublicKeys","console","log","a","da","likers","followers","diamonders","users","getUsersStateless","followerUsers","diamonderUsers","UserList","user","ProfileEntryResponse","Username","mb","width","e","target","value","like","index","follow","trans"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Box, TextField } from \"@mui/material\";\r\nimport DesoApi from \"./libs/desoApi\";\r\nconst Notification = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [desoApi, setDesoApi] = useState(null);\r\n\r\n  const [follower, setFollower] = useState([]);\r\n  const [liker, setLiker] = useState([]);\r\n  const [diamonder, setDiamonder] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [usernames, setUsernames] = useState([]);\r\n  const [usernamesFollowers, setUsernamesFollowers] = useState([]);\r\n  const [usernamesDiamonders, setUsernamesDiamonders] = useState([]);\r\n  const getNotifications = async () => {\r\n    const PublicKeyBase58Check = username;\r\n    const notificationsCall = await desoApi.getNotifications(\r\n      PublicKeyBase58Check\r\n    );\r\n    await setLiker(\r\n      notificationsCall?.Notifications.map((x) =>\r\n        x.Metadata.TxnType === \"LIKE\"\r\n          ? [\r\n              x.Metadata.TransactorPublicKeyBase58Check,\r\n              x.Metadata.LikeTxindexMetadata.PostHashHex,\r\n            ]\r\n          : \"x\"\r\n      ).filter((item, pos) => item.indexOf(\"x\"))\r\n    );\r\n    await setFollower(\r\n      notificationsCall?.Notifications.map((x) =>\r\n        x.Metadata.TxnType === \"FOLLOW\"\r\n          ? [x.Metadata.TransactorPublicKeyBase58Check]\r\n          : \"x\"\r\n      ).filter((item, pos) => item.indexOf(\"x\"))\r\n    );\r\n    await setDiamonder(\r\n      notificationsCall?.Notifications.map((x) =>\r\n        x.Metadata.TxnType === \"BASIC_TRANSFER\"\r\n          ? [\r\n              x.Metadata.TransactorPublicKeyBase58Check,\r\n              x.Metadata.BasicTransferTxindexMetadata.DiamondLevel,\r\n              x.Metadata.BasicTransferTxindexMetadata.PostHashHex,\r\n            ]\r\n          : \"x\"\r\n      ).filter((item, pos) => item.indexOf(\"x\"))\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    if (liker.length > 0 && diamonder.length>0 && follower.length>0) {\r\n      getUsers();\r\n      const allPublicKeys = [...liker , ...follower, ...diamonder ].map(x=> x[0])\r\n      console.log(\"AAAAA\",a)\r\n    }\r\n  }, [liker,diamonder,follower]);\r\n\r\n  useEffect(() => {\r\n    const da = new DesoApi();\r\n    setDesoApi(da);\r\n  }, []);\r\n\r\n  const getUsers = async () => {\r\n    const likers = await liker?.map((x) => x[0]);\r\n    const followers = await follower?.map((x) => x[0]);\r\n    const diamonders = await diamonder?.map((x) => x[0]);\r\n    const users = await desoApi.getUsersStateless(likers);\r\n    const followerUsers = await desoApi.getUsersStateless(followers);\r\n    const diamonderUsers = await desoApi.getUsersStateless(diamonders);\r\n\r\n    console.log(\"USERRSS\", users);\r\n    setUsernames(\r\n      users?.UserList.map((user) => user?.ProfileEntryResponse?.Username)\r\n    );\r\n    setUsernamesFollowers(\r\n      followerUsers?.UserList.map(\r\n        (user) => user?.ProfileEntryResponse?.Username\r\n      )\r\n    );\r\n    setUsernamesDiamonders(\r\n      diamonderUsers?.UserList.map(\r\n        (user) => user?.ProfileEntryResponse?.Username\r\n      )\r\n    );\r\n  };\r\n\r\n  console.log(\"liker\", liker);\r\n  console.log(\"usernames\", usernamesFollowers);\r\n  console.log(\"diamonders\",diamonder)\r\n  console.log(\"diamond profiles\", usernamesDiamonders)\r\n  return (\r\n    <div>\r\n      <Box sx={{ mb: 2 }}>\r\n        <TextField\r\n          sx={{ width: \"100%\", mb: 2 }}\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          label=\"Get notifications of any profile using his/her public key\"\r\n        />\r\n      </Box>\r\n      <Box />\r\n      <Button sx={{ mb: 2 }} variant=\"contained\" onClick={getNotifications}>\r\n        Get notifications\r\n      </Button>\r\n\r\n      <>\r\n        <div>\r\n          {usernames.length > 0\r\n            ? liker?.map((like, index) => (\r\n                <ul>\r\n                  <li>\r\n                    {\" \"}\r\n                    {usernames[index]} Liked your post with the postHashHex{\" \"}\r\n                    {like[1]}.\r\n                  </li>\r\n                </ul>\r\n              ))\r\n            : \"\"}\r\n          {usernamesFollowers.length > 0\r\n            ? follower?.map((follow, index) => (\r\n                <ul>\r\n                  <li> {usernamesFollowers[index]} Followed you.</li>\r\n                </ul>\r\n              ))\r\n            : \"\"}\r\n          {usernamesDiamonders.length > 0\r\n            ? diamonder.map((trans, index) => (\r\n                <ul>\r\n                  <li>\r\n                    {\" \"}\r\n                    {usernamesDiamonders[index]} Gave you {trans[1]} Diamond\r\n                  </li>\r\n                </ul>\r\n              ))\r\n            : \"\"}\r\n        </div>\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n"]},"metadata":{},"sourceType":"module"}